// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: video.proto

package vdgen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoManage_GetVideoInfo_FullMethodName = "/video.VideoManage/GetVideoInfo"
	VideoManage_GetVideo_FullMethodName     = "/video.VideoManage/GetVideo"
)

// VideoManageClient is the client API for VideoManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoManageClient interface {
	GetVideoInfo(ctx context.Context, in *AboutVideoRequest, opts ...grpc.CallOption) (*AboutVideoResponse, error)
	GetVideo(ctx context.Context, in *VideoFileRequest, opts ...grpc.CallOption) (*VideoFileResponse, error)
}

type videoManageClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoManageClient(cc grpc.ClientConnInterface) VideoManageClient {
	return &videoManageClient{cc}
}

func (c *videoManageClient) GetVideoInfo(ctx context.Context, in *AboutVideoRequest, opts ...grpc.CallOption) (*AboutVideoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AboutVideoResponse)
	err := c.cc.Invoke(ctx, VideoManage_GetVideoInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoManageClient) GetVideo(ctx context.Context, in *VideoFileRequest, opts ...grpc.CallOption) (*VideoFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoFileResponse)
	err := c.cc.Invoke(ctx, VideoManage_GetVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoManageServer is the server API for VideoManage service.
// All implementations must embed UnimplementedVideoManageServer
// for forward compatibility.
type VideoManageServer interface {
	GetVideoInfo(context.Context, *AboutVideoRequest) (*AboutVideoResponse, error)
	GetVideo(context.Context, *VideoFileRequest) (*VideoFileResponse, error)
	mustEmbedUnimplementedVideoManageServer()
}

// UnimplementedVideoManageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoManageServer struct{}

func (UnimplementedVideoManageServer) GetVideoInfo(context.Context, *AboutVideoRequest) (*AboutVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoInfo not implemented")
}
func (UnimplementedVideoManageServer) GetVideo(context.Context, *VideoFileRequest) (*VideoFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedVideoManageServer) mustEmbedUnimplementedVideoManageServer() {}
func (UnimplementedVideoManageServer) testEmbeddedByValue()                     {}

// UnsafeVideoManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoManageServer will
// result in compilation errors.
type UnsafeVideoManageServer interface {
	mustEmbedUnimplementedVideoManageServer()
}

func RegisterVideoManageServer(s grpc.ServiceRegistrar, srv VideoManageServer) {
	// If the following call pancis, it indicates UnimplementedVideoManageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoManage_ServiceDesc, srv)
}

func _VideoManage_GetVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AboutVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManageServer).GetVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoManage_GetVideoInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManageServer).GetVideoInfo(ctx, req.(*AboutVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoManage_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManageServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoManage_GetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManageServer).GetVideo(ctx, req.(*VideoFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoManage_ServiceDesc is the grpc.ServiceDesc for VideoManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.VideoManage",
	HandlerType: (*VideoManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVideoInfo",
			Handler:    _VideoManage_GetVideoInfo_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _VideoManage_GetVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video.proto",
}
